{"version":3,"sources":["util/pinata.js","util/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","web3","createAlchemyWeb3","contractABI","contractAddress","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","code","target","rel","href","getCurrentWalletConnected","length","mintNFT","url","name","description","trim","metadata","Object","create","image","pinataResponse","tokenURI","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","setURL","addWalletListener","on","accounts","useEffect","fetchWallet","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","value","style","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91ab127b.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\nconst axios = require('axios');\r\n\r\nexport const pinJSONToIPFS = async (JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n            return {\r\n                success: true,\r\n                pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n            };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n\r\n        });\r\n};","import { pinJSONToIPFS } from './pinata.js'\r\n\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require(\"../contract-abi.json\");\r\nconst contractAddress = \"0x45206Ec7CaA5c2D771837995803fC2D090e5F66E\";\r\n\r\n// async function loadContract() {\r\n//     return new web3.eth.Contract(contractABI, contractAddress);\r\n// }\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_requestAccounts\",\r\n            });\r\n            const obj = {\r\n                status: \"👆🏽 Write a message in the text-field above.\",\r\n                address: addressArray[0],\r\n            };\r\n            return obj;\r\n        } catch (err) {\r\n            if (err.code === 4001) {\r\n                return {\r\n                    status: \"😥 Please connect to MetaMask to use.\",\r\n                };\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"😥 \" + err.message,\r\n                };\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n        try {\r\n            const addressArray = await window.ethereum.request({\r\n                method: \"eth_accounts\",\r\n            });\r\n            if (addressArray.length > 0) {\r\n                return {\r\n                    address: addressArray[0],\r\n                    status: \"👆🏽 Write a message in the text-field above.\",\r\n                };\r\n            } else {\r\n                return {\r\n                    address: \"\",\r\n                    status: \"🦊 Connect to Metamask using the top right button.\",\r\n                };\r\n            }\r\n        } catch (err) {\r\n            return {\r\n                address: \"\",\r\n                status: \"😥 \" + err.message,\r\n            };\r\n        }\r\n    } else {\r\n        return {\r\n            address: \"\",\r\n            status: (\r\n                <span>\r\n                    <p>\r\n                        {\" \"}\r\n                        🦊{\" \"}\r\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n                            You must install Metamask, a virtual Ethereum wallet, in your\r\n                            browser.\r\n                        </a>\r\n                    </p>\r\n                </span>\r\n            ),\r\n        };\r\n    }\r\n};\r\n\r\nexport const mintNFT = async (url, name, description) => {\r\n    //error handling\r\n    if (url.trim() === \"\" || (name.trim() === \"\" || description.trim() === \"\")) {\r\n        return {\r\n            success: false,\r\n            status: \"❗Please make sure all fields are completed before minting.\",\r\n        }\r\n    }\r\n\r\n    //make metadata\r\n    const metadata = Object.create(null);\r\n    metadata.name = name;\r\n    metadata.image = url;\r\n    metadata.description = description;\r\n\r\n    //make pinata call\r\n    const pinataResponse = await pinJSONToIPFS(metadata);\r\n    if (!pinataResponse.success) {\r\n        return {\r\n            success: false,\r\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n        }\r\n    }\r\n    const tokenURI = pinataResponse.pinataUrl;\r\n\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract \r\n    };\r\n\r\n    //sign transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: \"✅ Check out your transaction on Etherscan: https://goerli.etherscan.io/tx/\" + txHash\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}","import { useEffect, useState } from \"react\";\r\nimport {\r\n  connectWallet,\r\n  getCurrentWalletConnected,\r\n  mintNFT\r\n} from \"./util/interact.js\";\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n\r\n  useEffect(() => { //TODO: implement\r\n    async function fetchWallet() {\r\n      const { address, status } = await getCurrentWalletConnected();\r\n      setWallet(address);\r\n      setStatus(status);\r\n      addWalletListener();\r\n    }\r\n    fetchWallet();\r\n  }, []);\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => { //TODO: implement\r\n    const walletResponse = await connectWallet();\r\n    if (typeof walletResponse.address !== 'undefined') {\r\n      setWallet(walletResponse.address);\r\n    }\r\n    setStatus(walletResponse.status);\r\n  };\r\n\r\n  const onMintPressed = async () => { //TODO: implement\r\n    const { status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">🧙‍♂️ NFT Minter</h1>\r\n      <p>\r\n        Simply add your asset's link, name, and description, then press \"Mint.\"\r\n      </p>\r\n      <form>\r\n        <h2>🔗 Link to asset: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\r\n          onChange={(event) => setURL(event.target.value)}\r\n        />\r\n        <h2>🤔 Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>✍️ Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\" style={{ color: \"red\" }}>\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}